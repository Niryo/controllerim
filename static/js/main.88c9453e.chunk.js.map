{"version":3,"sources":["App/AppStore.js","chuckNorrisService.js","NotesList/NotesListController.js","NotesList/NotificationListItem.js","NotesList/NotesList.js","App/App.js","serviceWorker.js","index.js"],"names":["AppStore","this","state","totalNotesCount","userName","value","appStore","store","fetchRandomJoke","a","fetch","response","json","result","joke","NotesListController","controller","firstItem","title","text","id","listItems","selectedItem","inputValue","item","push","length","increaseCounter","currentInstanceId","otherInstanceId","getInstance","copyNote","NotificationListItem","observer","props","React","useRef","controllerId","current","className","getSelectedItem","onClick","setSelectedItem","key","data-hook","NotesList","handleOnKeyDown","e","target","keyCode","addNote","create","getListItems","map","theme","renderListItems","getInputValue","onChange","setInputValue","onKeyDown","editSelectedNote","placeholder","getUserName","addRandomJoke","copyNoteToOther","App","getTotalNotesCount","setUserName","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88c9453e.chunk.js","sourcesContent":["import { store } from 'controllerim';\nclass AppStore {\n  constructor() {\n    this.state = {\n      totalNotesCount: 2,\n      userName: 'bob'\n    };\n  }\n\n  getTotalNotesCount() {\n    return this.state.totalNotesCount;\n  }\n\n  increaseCounter() {\n    this.state.totalNotesCount++;\n  }\n\n  getUserName() {\n    return this.state.userName;\n  }\n  setUserName(value){\n    this.state.userName = value;\n  }\n}\n\nexport const appStore = store(AppStore);","export const fetchRandomJoke = async () => {\n  const response = await fetch('https://api.icndb.com/jokes/random');\n  const result = await response.json();\n  return result.value.joke;\n};","import {controller} from 'controllerim';\nimport {appStore} from '../App/AppStore';\nimport {fetchRandomJoke} from '../chuckNorrisService';\n\nexport const NotesListController = controller(class {\n  constructor() {\n    const firstItem = {title: 'firstItem', text: '', id: 0};\n    this.state = {\n      listItems: [firstItem],\n      selectedItem: firstItem,\n      inputValue: ''\n    };\n  }\n  getSelectedItem() {\n    return this.state.selectedItem;\n  }\n  setSelectedItem(item) {\n    this.state.selectedItem = item;\n  }\n\n  getInputValue() {\n    return this.state.inputValue;\n  }\n  setInputValue(value) {\n    this.state.inputValue = value;\n  }\n  getListItems() {\n    return this.state.listItems;\n  }\n\n  addNote() {\n    this.state.listItems.push({title: this.state.inputValue, text: '', id: this.state.listItems.length});\n    this.state.inputValue = '';\n    // update the total notes counter in the app's controller:\n    appStore.increaseCounter();\n  }\n\n  editSelectedNote(value) {\n    this.state.selectedItem.text = value;\n  }\n\n  copyNote(text) {\n    this.state.selectedItem.text = text;\n  }\n\n  async addRandomJoke() {\n    const joke = await fetchRandomJoke();\n    this.state.selectedItem.text = joke;\n  }\n\n  copyNoteToOther(currentInstanceId) {\n    const otherInstanceId = currentInstanceId === 'first' ? 'second' : 'first';\n    const otherInstanceController = NotesListController.getInstance(otherInstanceId);\n    otherInstanceController.copyNote(this.state.selectedItem.text);\n  }\n});\n","import React from 'react';\nimport {NotesListController} from './NotesListController';\nimport {observer} from 'controllerim';\nexport const NotificationListItem = observer((props) => {\n  const controller = React.useRef(NotesListController.getInstance(props.controllerId)).current;\n  const {item} = props;\n  return (\n    <li\n      className={`listItem ${controller.getSelectedItem().id === item.id ? 'selected' : ''}`}\n      onClick={() => controller.setSelectedItem(item)}\n      key={item.id}\n      data-hook=\"listItem\"\n    >\n      {item.title}\n    </li>\n  )\n});","import * as React from 'react';\nimport {NotesListController} from './NotesListController';\nimport { observer } from 'controllerim';\nimport {appStore} from '../App/AppStore';\nimport './NotesList.css';\nimport {NotificationListItem} from './NotificationListItem';\nexport const NotesList = observer(class extends React.Component {\n  constructor(props) {\n    super(props);\n    // get own controller:\n    this.controller = NotesListController.create(this.props.id);\n  }\n  \n  renderListItems() {\n    return this.controller.getListItems().map((item) => <NotificationListItem item={item} controllerId={this.props.id}/>);\n  }\n\n  handleOnKeyDown = (e) => {\n    const value = e.target.value;\n    // add note when user clicks on enter:\n    if (e.keyCode === 13 && value !== '') {\n      this.controller.addNote();\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.props.theme}>\n        <div className=\"container\">\n          <div className=\"leftPane\">\n            <h1>Notes:</h1>\n            <ul>\n              {this.renderListItems()}\n            </ul>\n            <div className=\"inputLabel\"> Enter title and press enter:</div>\n            <input\n              value={this.controller.getInputValue()}\n              onChange={(e) => this.controller.setInputValue(e.target.value)}\n              onKeyDown={this.handleOnKeyDown}\n              data-hook=\"input\"\n            />\n          </div>\n          <div className=\"rightPane\">\n            <textarea\n              value={this.controller.getSelectedItem().text}\n              onChange={(e) => this.controller.editSelectedNote(e.target.value)}\n              placeholder={`Hello ${appStore.getUserName()}, Whats on your mind?`}\n            />\n            <button onClick={() => this.controller.addRandomJoke()}>Add chuck norris joke</button>\n            <button onClick={() => this.controller.copyNoteToOther(this.props.id)}>Copy to other note list instance</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n});\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport { NotesList } from '../NotesList/NotesList';\nimport { observer } from 'controllerim';\nimport {appStore} from './AppStore';\n\nexport const App = observer(class extends Component {\n\n  render() {\n    return (\n      <div className=\"appContainer\">\n        <h1>This is an example of multiple instacne of the same component (with different themes)</h1>\n        <h2 data-hook=\"counter\">Total notes count: {appStore.getTotalNotesCount()}</h2>\n        <label className=\"userNameInputLabel\">Enter Your Name:</label>\n        <input\n          className=\"userNameInput\"\n          value={appStore.getUserName()}\n          onChange={(e) => appStore.setUserName(e.target.value)} />\n        <div className=\"notesContainer\">\n          <div className=\"leftNote\">\n            <NotesList theme={'theme1'} id=\"first\"/>\n          </div>\n          <div>\n           <NotesList theme={'theme2'} id=\"second\"/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}